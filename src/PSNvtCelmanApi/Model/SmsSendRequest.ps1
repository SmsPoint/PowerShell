#
# sms-client
# API for sms-send functions
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The structure to describe a request to send a text message.

.PARAMETER SenderName
No description available.
.PARAMETER Body
No description available.
.PARAMETER Phone
No description available.
.PARAMETER Source
No description available.
.OUTPUTS

SmsSendRequest<PSCustomObject>
#>

function Initialize-SmsSendRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SenderName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Phone},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source}
    )

    Process {
        'Creating PSCustomObject: PSNvtCelmanApi => SmsSendRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$SenderName) {
            throw "invalid value for 'SenderName', 'SenderName' cannot be null."
        }

        if (!$Body) {
            throw "invalid value for 'Body', 'Body' cannot be null."
        }

        if (!$Phone) {
            throw "invalid value for 'Phone', 'Phone' cannot be null."
        }

        if (!$Source) {
            throw "invalid value for 'Source', 'Source' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "senderName" = ${SenderName}
            "body" = ${Body}
            "phone" = ${Phone}
            "source" = ${Source}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SmsSendRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to SmsSendRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SmsSendRequest<PSCustomObject>
#>
function ConvertFrom-JsonToSmsSendRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSNvtCelmanApi => SmsSendRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SmsSendRequest
        $AllProperties = ("senderName", "body", "phone", "source")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `senderName` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "senderName"))) {
            throw "Error! JSON cannot be serialized due to the required property `senderName` missing."
        } else {
            $SenderName = $JsonParameters.PSobject.Properties["senderName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) {
            throw "Error! JSON cannot be serialized due to the required property `body` missing."
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone"))) {
            throw "Error! JSON cannot be serialized due to the required property `phone` missing."
        } else {
            $Phone = $JsonParameters.PSobject.Properties["phone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) {
            throw "Error! JSON cannot be serialized due to the required property `source` missing."
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        $PSO = [PSCustomObject]@{
            "senderName" = ${SenderName}
            "body" = ${Body}
            "phone" = ${Phone}
            "source" = ${Source}
        }

        return $PSO
    }

}

